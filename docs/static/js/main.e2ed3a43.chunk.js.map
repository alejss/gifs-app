{"version":3,"sources":["reportWebVitals.js","components/AddCategory/index.js","components/GridGifItem/index.js","services/gifs/index.js","components/GifGrid/index.js","hooks/useFetchGifs.js","components/GifExpertApp/index.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","seetCategories","useState","inputValue","setinputValue","onSubmit","evn","preventDefault","trim","length","categories","type","placeholder","value","onChange","text","target","GridGifItem","id","title","url","className","src","alt","getGifs","category","a","categoryEncode","encodeURI","process","fetch","resp","json","data","gifs","map","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","fetchGifs","useFetchGifs","image","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"iOAYeA,G,YAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,6BCJDQ,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAAqB,EACXC,mBAAS,IADE,mBACxCC,EADwC,KAC5BC,EAD4B,KAc/C,OACI,sBAAMC,SAPW,SAACC,GAClBA,EAAIC,iBACAJ,EAAWK,OAAOC,OAAS,GAAGR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC/EN,EAAc,KAId,SACI,uBACIO,KAAK,OACLC,YAAY,oBACZC,MAAOV,EACPW,SAjBa,SAACR,GACtB,IAAMS,EAAOT,EAAIU,OAAOH,MACxBT,EAAcW,S,QCLTE,G,YAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACrC,OACI,sBAAKC,UAAU,wCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,S,uBCPHK,EAAO,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,6DACbC,EAAiBC,UAAUH,GAC3BL,EAFa,iDAEmCO,EAFnC,6BAEsEE,oCAFtE,SAGAC,MAAMV,GAHN,cAGbW,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,kBAA4B,CAAEjB,GAA9B,EAAGA,GAA+BC,MAAlC,EAAOA,MAAkCC,IAAzC,EAAcgB,OAAuCC,iBAAiBjB,QANzE,kBAOZc,GAPY,4CAAH,sDCKPI,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAEdS,ECJgB,SAACT,GAAc,IAAD,EACZvB,mBAAS,CAC/BgC,KAAM,GACNK,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAetC,OATAC,qBAAU,YACS,uCAAG,4BAAAhB,EAAA,sEACKF,EAAQC,GADb,OACRS,EADQ,OAEdO,EAAS,CAAEP,OAAMK,SAAS,IAFZ,2CAAH,oDAIfI,KAED,CAAClB,EAAUgB,IAEPD,EDXUI,CAAanB,GAAtBS,KAER,OACI,qCACI,6BAAoBT,GAAXA,GACT,qBAAKJ,UAAU,YAAf,SAEQa,EAAKC,KAAI,SAACU,GAAD,OACL,cAAC,EAAD,eAEQA,GADCA,EAAM3B,aET1B4B,EAAe,WAAO,IAAD,EACK5C,mBAAS,CAAC,SADf,mBACzBQ,EADyB,KACbT,EADa,KAEhC,OACE,qCACE,gDACA,uBACA,cAAC,EAAD,CAAaA,eAAgBA,IAC7B,6BAEIS,EAAWyB,KAAI,SAACV,GAAD,OAAe,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCPtDsB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAG1B3D,M","file":"static/js/main.e2ed3a43.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ seetCategories }) => {\n    const [inputValue, setinputValue] = useState('')\n\n    const handleChangeText = (evn) => {\n        const text = evn.target.value\n        setinputValue(text)\n    }\n\n    const handleSubmit = (evn) => {\n        evn.preventDefault()\n        if (inputValue.trim().length > 2) seetCategories(categories => [inputValue, ...categories])\n        setinputValue('')\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type='text'\n                placeholder='Add categories...'\n                value={inputValue}\n                onChange={handleChangeText}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    seetCategories: PropTypes.func.isRequired,\n}\n","import React from 'react'\nimport './style.css'\n\nexport const GridGifItem = ({ id, title, url }) => {\n    return (\n        <div className=\"card animate__animated animate__swing\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","export const getGifs = async (category) => {\n    const categoryEncode = encodeURI(category)\n    const url = `https://api.giphy.com/v1/gifs/search?q=${categoryEncode}&limit=10&api_key=${process.env.REACT_APP_GIPHY_KEY}`\n    const resp = await fetch(url)\n    const { data } = await resp.json()\n\n    const gifs = data.map(({ id, title, images }) => ({ id, title, url: images.downsized_medium.url }))\n    return gifs;\n}","import React from 'react'\nimport './style.css'\nimport { GridGifItem } from '../GridGifItem'\nimport { useFetchGifs } from '../../hooks/useFetchGifs'\n\nexport const GifGrid = ({ category }) => {\n\n    const { gifs } = useFetchGifs(category)\n\n    return (\n        <>\n            <h3 key={category}>{category}</h3>\n            <div className=\"card-grid\">\n                {\n                    gifs.map((image) => (\n                        <GridGifItem\n                            key={image.id}\n                            {...image}\n                        />)\n                    )\n                }\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from 'react'\nimport { getGifs } from '../services/gifs'\n\nexport const useFetchGifs = (category) => {\n    const [state, setstate] = useState({\n        gifs: [],\n        loading: true,\n    })\n\n    useEffect(() => {\n        const fetchGifs = async () => {\n            const gifs = await getGifs(category)\n            setstate({ gifs, loading: false })\n        };\n        fetchGifs()\n\n    }, [category, setstate])\n\n    return state\n}","import React, { useState } from 'react'\nimport './style.css'\n\n// Components\nimport { AddCategory } from '../AddCategory'\nimport { GifGrid } from '../GifGrid'\n\nexport const GifExpertApp = () => {\n  const [categories, seetCategories] = useState(['Cats'])\n  return (\n    <>\n      <h2>Gif Expert App</h2>\n      <hr />\n      <AddCategory seetCategories={seetCategories} />\n      <ol>\n        {\n          categories.map((category) => (<GifGrid key={category} category={category} />))\n        }\n      </ol>\n    </>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'animate.css'\nimport reportWebVitals from './reportWebVitals';\n\n// Components\nimport { GifExpertApp } from './components/GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}